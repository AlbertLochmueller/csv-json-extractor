var csvParse = require('csv-parse');
var csvStringify = require('csv-stringify');
var fs = require('fs');
var path = require('path');

function AsyncError(errs) {
	Error.call(this);
	Error.captureStackTrace(this, this.constructor);

	this.name = this.constructor.name;
	this.message = 'Errors occurred while processing asynchronous tasks: '+JSON.stringify(errs.map(function(err) { return err.message }));
	this.errs = errs;
}

(function(util) {
	util.inherits(AsyncError, Error);
})(require('util'));

function readCsv(fileName, cb) {
	fs.readFile(fileName, { encoding: 'utf8' }, function(err, data) {
		if (err) {
			cb(err);
			return;
		}

		csvParse(data, function(err, csvData) {
			if (err) {
				cb(err);
				return;
			}

			var headers = csvData.shift();

			cb(null, csvData.map(function(row) {
				var rowMap = {};
				for (var i = 0; i < row.length; i++) {
					rowMap[headers[i]] = row[i];
				}
				return rowMap;
			}));
		});
	});
}

function writeCsv(csvData, outputCsvFile, cb) {
	csvStringify(csvData, {
		header: true
	}, function(err, output) {
		if (err) {
			cb(err);
			return;
		}

		fs.writeFile(outputCsvFile, output, { encoding: 'utf8' }, function(err) {
			if (err) {
				cb(err);
				return;
			}

			cb();
		});
	});
}

function updateRows(csvFile, fn, cb) {
	cb = cb || printResult;

	readCsv(csvFile, function(err, rows) {
		if (err) {
			cb(err);
			return;
		}

		rows.forEach(fn);

		writeCsv(rows, csvFile, function(err) {
			if (err) {
				cb(err);
				return;
			}

			cb(null, {
				totalRows: rows.length
			});
		});
	});
}

function printResult(err, result) {
	if (err) {
		console.log(err.stack);
		process.exit(1);
		return;
	}

	console.log('ok, '+result.totalRows+' rows processed');
}

module.exports = {
	writeCsv: writeCsv,
	readCsv: readCsv,
	updateRows: updateRows,
	printResult: printResult
};
